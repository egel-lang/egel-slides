
So far, I hope the examples given have convinced you that
we've presented a model where evaluation can be achieved
through trampolining the root node of a directed acyclic
graph.

But, given that, what did we learn from that and what 
can we actually do with it?

For starters, we can implement a functional language that
exploits the model and shows that it actually works.

But apart from that, it's a very strong invariant
on a trivialized model that showcases, relates, and clarifies 
a number of things.

For one, through the act of trivialization we ended up 
with a clear mental model that clarifies or can be elaborated upon.

We may want to know why stack machines were a solution in the 
first place, and this model -by making explicit what
work should be done in what order- clarifies that; it also
closely relates compiling with continuations to graph rewriting.

Or we might be stuck proving that effect handlers cannot
form cycles and refer to this model. A small toy implementation
in Egel would provide some evidence for that.

